{"mappings":"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","sources":["<anon>","src/index.js","src/js/math.js","src/js/Sudoku.js"],"sourcesContent":["const $4473f624941d30b6$export$a3fe094919f356fd = Math.floor;\nconst $4473f624941d30b6$export$4385e60b38654f68 = Math.random;\nconst $4473f624941d30b6$export$8960430cfd85939f = Math.max;\nconst $4473f624941d30b6$export$96ec731ed4dcb222 = Math.min;\nconst $4473f624941d30b6$export$a85cdcada2f6e6d0 = (min, max)=>$4473f624941d30b6$export$a3fe094919f356fd($4473f624941d30b6$export$4385e60b38654f68() * (max - min + 1) + min);\n\n\n\nclass $86f8c09beece3342$export$2e2bcd8739ae039 {\n    constructor(rows, columns){\n        this.board = [];\n        this.generate(rows, columns);\n        this.fill();\n    }\n    generate(rows = 2, columns = 2) {\n        for(let i = 0; i < columns; i++){\n            this.board[i] = [];\n            for(let j = 0; j < rows; j++)this.board[i][j] = new Array(9).fill(\"empty\");\n        }\n    }\n    fill() {\n        for(let i = 0; i < this.board.length; i++)for(let j = 0; j < this.board[i].length; j++){\n            let values = [\n                \"1\",\n                \"2\",\n                \"3\",\n                \"4\",\n                \"5\",\n                \"6\",\n                \"7\",\n                \"8\",\n                \"9\"\n            ];\n            let c = (0, $4473f624941d30b6$export$a85cdcada2f6e6d0)(0, 4);\n            for(let k = 0; k < c; k++){\n                let randValue = values[(0, $4473f624941d30b6$export$a85cdcada2f6e6d0)(0, values.length - 1)];\n                let x = (0, $4473f624941d30b6$export$a85cdcada2f6e6d0)(0, 2);\n                let y = (0, $4473f624941d30b6$export$a85cdcada2f6e6d0)(0, 2);\n                let isFilled = this.set(j, i, x, y, randValue);\n                while(!isFilled){\n                    x = (0, $4473f624941d30b6$export$a85cdcada2f6e6d0)(0, 2);\n                    y = (0, $4473f624941d30b6$export$a85cdcada2f6e6d0)(0, 2);\n                    randValue = values[(0, $4473f624941d30b6$export$a85cdcada2f6e6d0)(0, values.length - 1)];\n                    isFilled = this.set(j, i, x, y, randValue);\n                }\n            }\n        }\n    }\n    check(row, column, x, y, value) {\n        if (value === \"empty\") return true;\n        for(let i = 0; i < column; i++)for(let j = 0; j < 3; j++){\n            if (+this.board[i][row][j * 3 + x] === +value) return false;\n        }\n        for(let i = column + 1; i < this.board.length; i++)for(let j = 0; j < 3; j++){\n            if (+this.board[i][row][j * 3 + x] === +value) return false;\n        }\n        for(let i = 0; i < row; i++)for(let j = 0; j < 3; j++){\n            if (+this.board[column][i][y * 3 + j] === +value) return false;\n        }\n        for(let i = row + 1; i < this.board[0].length; i++)for(let j = 0; j < 3; j++){\n            if (+this.board[column][i][y * 3 + j] === +value) return false;\n        }\n        return true;\n    }\n    checkIfValueExists(row, column, value) {\n        if (value === \"empty\") return false;\n        let arr = this.board[column][row].filter((e)=>e !== \"empty\");\n        return arr.findIndex((e)=>{\n            return +e === +value;\n        }) !== -1;\n    }\n    set(row, column, x, y, value) {\n        if (!this.check(row, column, x, y, value) || this.checkIfValueExists(row, column, value)) return false;\n        this.board[column][row][y * 3 + x] = value;\n        return true;\n    }\n    get(row, column, x, y) {\n        return this.board[column][row][y * 3 + x];\n    }\n}\n\n\nlet $35da740d59af89ba$var$canvas, $35da740d59af89ba$var$ctx, $35da740d59af89ba$var$sudoku, $35da740d59af89ba$var$modal, $35da740d59af89ba$var$modalStat, $35da740d59af89ba$var$cell = {\n    x: undefined,\n    y: undefined,\n    x1: undefined,\n    y1: undefined\n}, $35da740d59af89ba$var$startX, $35da740d59af89ba$var$startY, $35da740d59af89ba$var$bigSize, $35da740d59af89ba$var$smallCellWidth, $35da740d59af89ba$var$smallCellHeight;\nwindow.addEventListener(\"load\", ()=>{\n    $35da740d59af89ba$var$modal = document.querySelector(\".modal\");\n    $35da740d59af89ba$var$modalStat = $35da740d59af89ba$var$modal.getBoundingClientRect();\n    $35da740d59af89ba$var$canvas = document.querySelector(\"canvas\");\n    $35da740d59af89ba$var$ctx = $35da740d59af89ba$var$canvas.getContext(\"2d\");\n    $35da740d59af89ba$var$canvas.width = innerWidth;\n    $35da740d59af89ba$var$canvas.height = innerHeight;\n    $35da740d59af89ba$var$sudoku = new (0, $86f8c09beece3342$export$2e2bcd8739ae039)(3, 3);\n    $35da740d59af89ba$var$setSizes();\n    $35da740d59af89ba$var$drawBoard();\n    $35da740d59af89ba$var$canvas.addEventListener(\"mousedown\", ({ offsetX: _x, offsetY: _y })=>{\n        $35da740d59af89ba$var$modal.classList.remove(\"active\");\n        if (_x < $35da740d59af89ba$var$startX || _x > $35da740d59af89ba$var$startX + $35da740d59af89ba$var$bigSize || _y < $35da740d59af89ba$var$startY || _y > $35da740d59af89ba$var$startY + $35da740d59af89ba$var$bigSize) return;\n        const x = (0, $4473f624941d30b6$export$a3fe094919f356fd)(_x - $35da740d59af89ba$var$startX);\n        const y = (0, $4473f624941d30b6$export$a3fe094919f356fd)(_y - $35da740d59af89ba$var$startY);\n        const bigCellX = (0, $4473f624941d30b6$export$a3fe094919f356fd)(x / $35da740d59af89ba$var$smallCellWidth);\n        const bigCellY = (0, $4473f624941d30b6$export$a3fe094919f356fd)(y / $35da740d59af89ba$var$smallCellWidth);\n        const smallCellX = (0, $4473f624941d30b6$export$a3fe094919f356fd)(x / (0, $4473f624941d30b6$export$a3fe094919f356fd)($35da740d59af89ba$var$smallCellWidth / 3)) - 3 * bigCellX;\n        const smallCellY = (0, $4473f624941d30b6$export$a3fe094919f356fd)(y / (0, $4473f624941d30b6$export$a3fe094919f356fd)($35da740d59af89ba$var$smallCellHeight / 3)) - 3 * bigCellY;\n        $35da740d59af89ba$var$cell.x = bigCellX;\n        $35da740d59af89ba$var$cell.y = bigCellY;\n        $35da740d59af89ba$var$cell.x1 = smallCellX;\n        $35da740d59af89ba$var$cell.y1 = smallCellY;\n        $35da740d59af89ba$var$modal.classList.add(\"active\");\n        if (_x + $35da740d59af89ba$var$modalStat.width / 2 > $35da740d59af89ba$var$startX + $35da740d59af89ba$var$bigSize) $35da740d59af89ba$var$modal.style.left = $35da740d59af89ba$var$startX + $35da740d59af89ba$var$bigSize - $35da740d59af89ba$var$modalStat.width + \"px\";\n        else if (_x - $35da740d59af89ba$var$modalStat.width / 2 < $35da740d59af89ba$var$startX) $35da740d59af89ba$var$modal.style.left = $35da740d59af89ba$var$startX + \"px\";\n        else $35da740d59af89ba$var$modal.style.left = _x - $35da740d59af89ba$var$modalStat.width / 2 + \"px\";\n        if (_y + $35da740d59af89ba$var$modalStat.height + 20 > $35da740d59af89ba$var$startY + $35da740d59af89ba$var$bigSize) $35da740d59af89ba$var$modal.style.top = $35da740d59af89ba$var$startY + $35da740d59af89ba$var$bigSize - $35da740d59af89ba$var$modalStat.height + \"px\";\n        else $35da740d59af89ba$var$modal.style.top = _y + 20 + \"px\";\n    });\n    $35da740d59af89ba$var$modal.addEventListener(\"click\", ({ target: target })=>{\n        if (target.tagName !== \"BUTTON\") return;\n        if (typeof $35da740d59af89ba$var$sudoku.get($35da740d59af89ba$var$cell.x, $35da740d59af89ba$var$cell.y, $35da740d59af89ba$var$cell.x1, $35da740d59af89ba$var$cell.y1) === \"string\" && $35da740d59af89ba$var$sudoku.get($35da740d59af89ba$var$cell.x, $35da740d59af89ba$var$cell.y, $35da740d59af89ba$var$cell.x1, $35da740d59af89ba$var$cell.y1) !== \"empty\") return;\n        if (target.classList.contains(\"clear\")) {\n            $35da740d59af89ba$var$sudoku.set($35da740d59af89ba$var$cell.x, $35da740d59af89ba$var$cell.y, $35da740d59af89ba$var$cell.x1, $35da740d59af89ba$var$cell.y1, \"empty\");\n            $35da740d59af89ba$var$drawBoard();\n            return;\n        }\n        $35da740d59af89ba$var$sudoku.set($35da740d59af89ba$var$cell.x, $35da740d59af89ba$var$cell.y, $35da740d59af89ba$var$cell.x1, $35da740d59af89ba$var$cell.y1, +target.dataset.value);\n        $35da740d59af89ba$var$drawBoard();\n        $35da740d59af89ba$var$modal.classList.remove(\"active\");\n    });\n});\nfunction $35da740d59af89ba$var$drawText(x, y, value, color, font) {\n    $35da740d59af89ba$var$ctx.beginPath();\n    $35da740d59af89ba$var$ctx.fillStyle = color;\n    $35da740d59af89ba$var$ctx.font = font;\n    $35da740d59af89ba$var$ctx.fillText(value, x, y);\n}\nfunction $35da740d59af89ba$var$drawLine(x, y, x1, y1, color = \"white\", lineWidth = 1) {\n    $35da740d59af89ba$var$ctx.beginPath();\n    $35da740d59af89ba$var$ctx.moveTo(x, y);\n    $35da740d59af89ba$var$ctx.lineTo(x1, y1);\n    $35da740d59af89ba$var$ctx.strokeStyle = color;\n    $35da740d59af89ba$var$ctx.lineWidth = lineWidth;\n    $35da740d59af89ba$var$ctx.stroke();\n}\nfunction $35da740d59af89ba$var$drawField({ startX: startX, startY: startY, width: width, height: height, color: color, lineWidth: lineWidth, columns: columns = 3, rows: rows = 3 }) {\n    for(let i = 0; i < columns - 1; i++)$35da740d59af89ba$var$drawLine(startX + (i + 1) * (width / columns), startY, startX + (i + 1) * (width / columns), startY + height, color, lineWidth);\n    for(let i = 0; i < rows - 1; i++)$35da740d59af89ba$var$drawLine(startX, startY + (i + 1) * (height / rows), startX + width, startY + (i + 1) * (height / rows), color, lineWidth);\n}\nfunction $35da740d59af89ba$var$drawValue(columns, rows) {\n    const fontSize = (0, $4473f624941d30b6$export$96ec731ed4dcb222)($35da740d59af89ba$var$canvas.width, $35da740d59af89ba$var$canvas.height) / 100 * 5;\n    let _i_ = 0, _j_ = 0;\n    for(let i = 0; i < columns * columns; i++){\n        if (_i_ === 3) _i_ = 0;\n        for(let j = 0; j < rows * rows; j++){\n            if (_j_ === 3) _j_ = 0;\n            let el = $35da740d59af89ba$var$sudoku.get((0, $4473f624941d30b6$export$a3fe094919f356fd)(j / columns), (0, $4473f624941d30b6$export$a3fe094919f356fd)(i / rows), _j_, _i_);\n            if (el === \"empty\") el = \"\";\n            let color = \"white\";\n            if (typeof el === \"string\") color = \"rgb(255, 0, 217)\";\n            $35da740d59af89ba$var$drawText($35da740d59af89ba$var$startX + $35da740d59af89ba$var$smallCellWidth * j / 3 + fontSize * 0.8, $35da740d59af89ba$var$startY + $35da740d59af89ba$var$smallCellHeight * i / 3 + fontSize * 1.45, el, color, `${fontSize}px Arial`);\n            _j_++;\n        }\n        _i_++;\n    }\n}\nfunction $35da740d59af89ba$var$drawBoard() {\n    $35da740d59af89ba$var$ctx.clearRect(0, 0, $35da740d59af89ba$var$canvas.width, $35da740d59af89ba$var$canvas.height);\n    // draw big field\n    $35da740d59af89ba$var$drawField({\n        startX: $35da740d59af89ba$var$startX,\n        startY: $35da740d59af89ba$var$startY,\n        width: $35da740d59af89ba$var$bigSize,\n        height: $35da740d59af89ba$var$bigSize,\n        columns: $35da740d59af89ba$var$sudoku.board[0].length,\n        rows: $35da740d59af89ba$var$sudoku.board.length,\n        lineWidth: 3\n    });\n    // draw big field small fields\n    for(let i = 0; i < $35da740d59af89ba$var$sudoku.board.length; i++)for(let j = 0; j < $35da740d59af89ba$var$sudoku.board[0].length; j++)$35da740d59af89ba$var$drawField({\n        startX: $35da740d59af89ba$var$startX + j * $35da740d59af89ba$var$smallCellWidth,\n        startY: $35da740d59af89ba$var$startY + i * $35da740d59af89ba$var$smallCellHeight,\n        width: $35da740d59af89ba$var$smallCellWidth,\n        height: $35da740d59af89ba$var$smallCellHeight,\n        columns: $35da740d59af89ba$var$sudoku.board[0].length,\n        rows: $35da740d59af89ba$var$sudoku.board.length\n    });\n    $35da740d59af89ba$var$drawValue($35da740d59af89ba$var$sudoku.board[0].length, $35da740d59af89ba$var$sudoku.board.length);\n}\nfunction $35da740d59af89ba$var$setSizes() {\n    $35da740d59af89ba$var$modal.style.top = 0;\n    $35da740d59af89ba$var$modal.style.left = 0;\n    $35da740d59af89ba$var$modal.classList.remove(\"active\");\n    $35da740d59af89ba$var$canvas.width = innerWidth;\n    $35da740d59af89ba$var$canvas.height = innerHeight;\n    $35da740d59af89ba$var$bigSize = (0, $4473f624941d30b6$export$96ec731ed4dcb222)($35da740d59af89ba$var$canvas.width, $35da740d59af89ba$var$canvas.height) - (0, $4473f624941d30b6$export$96ec731ed4dcb222)($35da740d59af89ba$var$canvas.width, $35da740d59af89ba$var$canvas.height) / 100 * 5;\n    $35da740d59af89ba$var$smallCellWidth = $35da740d59af89ba$var$bigSize / $35da740d59af89ba$var$sudoku.board[0].length;\n    $35da740d59af89ba$var$smallCellHeight = $35da740d59af89ba$var$bigSize / $35da740d59af89ba$var$sudoku.board.length;\n    $35da740d59af89ba$var$startX = $35da740d59af89ba$var$canvas.width / 2 - $35da740d59af89ba$var$smallCellWidth - $35da740d59af89ba$var$smallCellWidth / 2;\n    $35da740d59af89ba$var$startY = $35da740d59af89ba$var$canvas.height / 2 - $35da740d59af89ba$var$smallCellHeight - $35da740d59af89ba$var$smallCellHeight / 2;\n}\nwindow.addEventListener(\"resize\", ()=>{\n    $35da740d59af89ba$var$setSizes();\n    $35da740d59af89ba$var$drawBoard();\n});\n\n\n//# sourceMappingURL=index.bc328b24.js.map\n","import { floor, min } from \"./js/math\";\r\nimport Sudoku from \"./js/Sudoku\";\r\n\r\nlet canvas,\r\n  ctx,\r\n  sudoku,\r\n  modal,\r\n  modalStat,\r\n  cell = {\r\n    x: undefined,\r\n    y: undefined,\r\n    x1: undefined,\r\n    y1: undefined,\r\n  },\r\n  startX,\r\n  startY,\r\n  bigSize,\r\n  smallCellWidth,\r\n  smallCellHeight;\r\n\r\nwindow.addEventListener(\"load\", () => {\r\n  modal = document.querySelector(\".modal\");\r\n  modalStat = modal.getBoundingClientRect();\r\n  canvas = document.querySelector(\"canvas\");\r\n  ctx = canvas.getContext(\"2d\");\r\n\r\n  canvas.width = innerWidth;\r\n  canvas.height = innerHeight;\r\n\r\n  sudoku = new Sudoku(3, 3);\r\n\r\n  setSizes();\r\n  drawBoard();\r\n\r\n  canvas.addEventListener(\"mousedown\", ({ offsetX: _x, offsetY: _y }) => {\r\n    modal.classList.remove(\"active\");\r\n\r\n    if (\r\n      _x < startX ||\r\n      _x > startX + bigSize ||\r\n      _y < startY ||\r\n      _y > startY + bigSize\r\n    )\r\n      return;\r\n    const x = floor(_x - startX);\r\n    const y = floor(_y - startY);\r\n\r\n    const bigCellX = floor(x / smallCellWidth);\r\n    const bigCellY = floor(y / smallCellWidth);\r\n\r\n    const smallCellX = floor(x / floor(smallCellWidth / 3)) - 3 * bigCellX;\r\n    const smallCellY = floor(y / floor(smallCellHeight / 3)) - 3 * bigCellY;\r\n\r\n    cell.x = bigCellX;\r\n    cell.y = bigCellY;\r\n    cell.x1 = smallCellX;\r\n    cell.y1 = smallCellY;\r\n\r\n    modal.classList.add(\"active\");\r\n\r\n    if (_x + modalStat.width / 2 > startX + bigSize) {\r\n      modal.style.left = startX + bigSize - modalStat.width + \"px\";\r\n    } else if (_x - modalStat.width / 2 < startX) {\r\n      modal.style.left = startX + \"px\";\r\n    } else {\r\n      modal.style.left = _x - modalStat.width / 2 + \"px\";\r\n    }\r\n\r\n    if (_y + modalStat.height + 20 > startY + bigSize) {\r\n      modal.style.top = startY + bigSize - modalStat.height + \"px\";\r\n    } else {\r\n      modal.style.top = _y + 20 + \"px\";\r\n    }\r\n  });\r\n\r\n  modal.addEventListener(\"click\", ({ target }) => {\r\n    if (target.tagName !== \"BUTTON\") return;\r\n    if (\r\n      typeof sudoku.get(cell.x, cell.y, cell.x1, cell.y1) === \"string\" &&\r\n      sudoku.get(cell.x, cell.y, cell.x1, cell.y1) !== \"empty\"\r\n    )\r\n      return;\r\n\r\n    if (target.classList.contains(\"clear\")) {\r\n      sudoku.set(cell.x, cell.y, cell.x1, cell.y1, \"empty\");\r\n      drawBoard();\r\n      return;\r\n    }\r\n\r\n    sudoku.set(cell.x, cell.y, cell.x1, cell.y1, +target.dataset.value);\r\n    drawBoard();\r\n    modal.classList.remove(\"active\");\r\n  });\r\n});\r\n\r\nfunction drawText(x, y, value, color, font) {\r\n  ctx.beginPath();\r\n  ctx.fillStyle = color;\r\n  ctx.font = font;\r\n  ctx.fillText(value, x, y);\r\n}\r\n\r\nfunction drawLine(x, y, x1, y1, color = \"white\", lineWidth = 1) {\r\n  ctx.beginPath();\r\n  ctx.moveTo(x, y);\r\n  ctx.lineTo(x1, y1);\r\n  ctx.strokeStyle = color;\r\n  ctx.lineWidth = lineWidth;\r\n  ctx.stroke();\r\n}\r\n\r\nfunction drawField({\r\n  startX,\r\n  startY,\r\n  width,\r\n  height,\r\n  color,\r\n  lineWidth,\r\n  columns = 3,\r\n  rows = 3,\r\n}) {\r\n  for (let i = 0; i < columns - 1; i++) {\r\n    drawLine(\r\n      startX + (i + 1) * (width / columns),\r\n      startY,\r\n      startX + (i + 1) * (width / columns),\r\n      startY + height,\r\n      color,\r\n      lineWidth\r\n    );\r\n  }\r\n\r\n  for (let i = 0; i < rows - 1; i++) {\r\n    drawLine(\r\n      startX,\r\n      startY + (i + 1) * (height / rows),\r\n      startX + width,\r\n      startY + (i + 1) * (height / rows),\r\n      color,\r\n      lineWidth\r\n    );\r\n  }\r\n}\r\n\r\nfunction drawValue(columns, rows) {\r\n  const fontSize = (min(canvas.width, canvas.height) / 100) * 5;\r\n  let _i_ = 0,\r\n    _j_ = 0;\r\n  for (let i = 0; i < columns * columns; i++) {\r\n    if (_i_ === 3) _i_ = 0;\r\n    for (let j = 0; j < rows * rows; j++) {\r\n      if (_j_ === 3) _j_ = 0;\r\n      let el = sudoku.get(floor(j / columns), floor(i / rows), _j_, _i_);\r\n      if (el === \"empty\") el = \"\";\r\n\r\n      let color = \"white\";\r\n\r\n      if (typeof el === \"string\") color = \"rgb(255, 0, 217)\";\r\n\r\n      drawText(\r\n        startX + (smallCellWidth * j) / 3 + fontSize * 0.8,\r\n        startY + (smallCellHeight * i) / 3 + fontSize * 1.45,\r\n        el,\r\n        color,\r\n        `${fontSize}px Arial`\r\n      );\r\n      _j_++;\r\n    }\r\n    _i_++;\r\n  }\r\n}\r\n\r\nfunction drawBoard() {\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n  // draw big field\r\n  drawField({\r\n    startX: startX,\r\n    startY: startY,\r\n    width: bigSize,\r\n    height: bigSize,\r\n    columns: sudoku.board[0].length,\r\n    rows: sudoku.board.length,\r\n    lineWidth: 3,\r\n  });\r\n\r\n  // draw big field small fields\r\n  for (let i = 0; i < sudoku.board.length; i++) {\r\n    for (let j = 0; j < sudoku.board[0].length; j++) {\r\n      drawField({\r\n        startX: startX + j * smallCellWidth,\r\n        startY: startY + i * smallCellHeight,\r\n        width: smallCellWidth,\r\n        height: smallCellHeight,\r\n        columns: sudoku.board[0].length,\r\n        rows: sudoku.board.length,\r\n      });\r\n    }\r\n  }\r\n\r\n  drawValue(sudoku.board[0].length, sudoku.board.length);\r\n}\r\n\r\nfunction setSizes() {\r\n  modal.style.top = 0;\r\n  modal.style.left = 0;\r\n  modal.classList.remove(\"active\");\r\n\r\n  canvas.width = innerWidth;\r\n  canvas.height = innerHeight;\r\n\r\n  bigSize =\r\n    min(canvas.width, canvas.height) -\r\n    (min(canvas.width, canvas.height) / 100) * 5;\r\n  smallCellWidth = bigSize / sudoku.board[0].length;\r\n  smallCellHeight = bigSize / sudoku.board.length;\r\n\r\n  startX = canvas.width / 2 - smallCellWidth - smallCellWidth / 2;\r\n  startY = canvas.height / 2 - smallCellHeight - smallCellHeight / 2;\r\n}\r\n\r\nwindow.addEventListener(\"resize\", () => {\r\n  setSizes();\r\n  drawBoard();\r\n});\r\n","export const floor = Math.floor;\r\nexport const random = Math.random;\r\nexport const max = Math.max;\r\nexport const min = Math.min;\r\nexport const randInt = (min, max) => floor(random() * (max - min + 1) + min);","import { randInt } from \"./math\";\r\n\r\nexport default class Sudoku {\r\n  constructor(rows, columns) {\r\n    this.board = [];\r\n    this.generate(rows, columns);\r\n    this.fill();\r\n  }\r\n\r\n  generate(rows = 2, columns = 2) {\r\n    for (let i = 0; i < columns; i++) {\r\n      this.board[i] = [];\r\n      for (let j = 0; j < rows; j++) {\r\n        this.board[i][j] = new Array(9).fill(\"empty\");\r\n      }\r\n    }\r\n  }\r\n\r\n  fill() {\r\n    for (let i = 0; i < this.board.length; i++) {\r\n      for (let j = 0; j < this.board[i].length; j++) {\r\n        let values = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\n        let c = randInt(0, 4);\r\n        for (let k = 0; k < c; k++) {\r\n          let randValue = values[randInt(0, values.length - 1)];\r\n          let x = randInt(0, 2);\r\n          let y = randInt(0, 2);\r\n\r\n          let isFilled = this.set(j, i, x, y, randValue);\r\n\r\n          while (!isFilled) {\r\n            x = randInt(0, 2);\r\n            y = randInt(0, 2);\r\n            randValue = values[randInt(0, values.length - 1)];\r\n            isFilled = this.set(j, i, x, y, randValue);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  check(row, column, x, y, value) {\r\n    if (value === \"empty\") return true;\r\n\r\n    for (let i = 0; i < column; i++) {\r\n      for (let j = 0; j < 3; j++) {\r\n        if (+this.board[i][row][j * 3 + x] === +value) return false;\r\n      }\r\n    }\r\n    for (let i = column + 1; i < this.board.length; i++) {\r\n      for (let j = 0; j < 3; j++) {\r\n        if (+this.board[i][row][j * 3 + x] === +value) return false;\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < row; i++) {\r\n      for (let j = 0; j < 3; j++) {\r\n        if (+this.board[column][i][y * 3 + j] === +value) return false;\r\n      }\r\n    }\r\n    for (let i = row + 1; i < this.board[0].length; i++) {\r\n      for (let j = 0; j < 3; j++) {\r\n        if (+this.board[column][i][y * 3 + j] === +value) return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  checkIfValueExists(row, column, value) {\r\n    if (value === \"empty\") return false;\r\n\r\n    let arr = this.board[column][row].filter((e) => e !== \"empty\");\r\n\r\n    return (\r\n      arr.findIndex((e) => {\r\n        return +e === +value;\r\n      }) !== -1\r\n    );\r\n  }\r\n\r\n  set(row, column, x, y, value) {\r\n    if (\r\n      !this.check(row, column, x, y, value) ||\r\n      this.checkIfValueExists(row, column, value)\r\n    )\r\n      return false;\r\n\r\n    this.board[column][row][y * 3 + x] = value;\r\n    return true;\r\n  }\r\n\r\n  get(row, column, x, y) {\r\n    return this.board[column][row][y * 3 + x];\r\n  }\r\n}\r\n"],"names":["$4473f624941d30b6$export$a3fe094919f356fd","Math","floor","$4473f624941d30b6$export$4385e60b38654f68","random","$4473f624941d30b6$export$96ec731ed4dcb222","min","$4473f624941d30b6$export$a85cdcada2f6e6d0","max","$86f8c09beece3342$export$2e2bcd8739ae039","constructor","rows","columns","board","generate","fill","i","j","Array","length","values","c","k","randValue","x","y","isFilled","set","check","row","column","value","checkIfValueExists","arr","filter","e","findIndex","get","$35da740d59af89ba$var$canvas","$35da740d59af89ba$var$ctx","$35da740d59af89ba$var$sudoku","$35da740d59af89ba$var$modal","$35da740d59af89ba$var$modalStat","$35da740d59af89ba$var$cell","undefined","x1","y1","$35da740d59af89ba$var$startX","$35da740d59af89ba$var$startY","$35da740d59af89ba$var$bigSize","$35da740d59af89ba$var$smallCellWidth","$35da740d59af89ba$var$smallCellHeight","$35da740d59af89ba$var$drawLine","color","lineWidth","beginPath","moveTo","lineTo","strokeStyle","stroke","$35da740d59af89ba$var$drawField","startX","startY","width","height","$35da740d59af89ba$var$drawBoard","clearRect","$35da740d59af89ba$var$drawValue","fontSize","_i_","_j_","font","el","fillStyle","fillText","$35da740d59af89ba$var$setSizes","style","top","left","classList","remove","innerWidth","innerHeight","window","addEventListener","document","querySelector","getBoundingClientRect","getContext","offsetX","_x","offsetY","_y","bigCellX","bigCellY","smallCellX","smallCellY","add","target","tagName","contains","dataset"],"version":3,"file":"index.bc328b24.js.map"}